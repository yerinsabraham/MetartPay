rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper: check if the authenticated user is associated with the merchantId.
    // Preferred: use a custom claim `merchantId` (or `merchantIds`) set on the user's ID token.
    // Fallback: read the user's document to check merchant membership (slower).
    function isMerchantUser(merchantId) {
      return request.auth != null && (
        // custom claim containing single merchantId
        (request.auth.token.merchantId == merchantId) ||
        // custom claim containing an array of merchant ids
        (request.auth.token.merchantIds != null && merchantId in request.auth.token.merchantIds) ||
        // fallback: check the user document for merchantId/merchantIds
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.merchantId == merchantId) ||
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.merchantIds != null && merchantId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.merchantIds)
      );
    }

    function isAdmin() {
      return request.auth != null && request.auth.token.admin == true;
    }

    // Users: allow users to manage their own profile
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Merchants: owner (userId) or admin can manage merchant documents
    match /merchants/{merchantId} {
      allow read: if request.auth != null && (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if request.auth != null && (request.resource.data.userId == request.auth.uid || isAdmin());
      allow update, delete: if request.auth != null && (resource.data.userId == request.auth.uid || isAdmin());
    }

    // Payment links: merchant users can create/read/update/delete links for their merchant
    match /payment_links/{linkId} {
      allow create: if request.auth != null && isMerchantUser(request.resource.data.merchantId);
      allow read, update, delete: if request.auth != null && isMerchantUser(resource.data.merchantId);
    }

    // Customers: merchant users can manage customers belonging to their merchant
    match /customers/{customerId} {
      allow create: if request.auth != null && isMerchantUser(request.resource.data.merchantId);
      allow read, update, delete: if request.auth != null && isMerchantUser(resource.data.merchantId);
    }

    // Transactions
    match /transactions/{txId} {
      allow create: if request.auth != null && isMerchantUser(request.resource.data.merchantId);
      allow read: if request.auth != null && isMerchantUser(resource.data.merchantId);
      allow update, delete: if isAdmin();
    }

    // Invoices - allow public read for payment pages, but writes restricted to merchant users
    match /invoices/{invoiceId} {
      allow read: if true; // payment pages rely on public reads
      allow create: if request.auth != null && isMerchantUser(request.resource.data.merchantId);
      allow update, delete: if request.auth != null && (resource.data.merchantId != null && isMerchantUser(resource.data.merchantId));
    }

    // Payouts, audit_logs, wallets - admin only
    match /payouts/{payoutId} { allow read, write: if isAdmin(); }
    match /audit_logs/{logId} { allow read, write: if isAdmin(); }
    match /wallets/{walletId} { allow read, write: if isAdmin(); }
  }
}