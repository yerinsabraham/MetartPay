import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'firebase_options.dart';
import 'screens/demo_simulate_page.dart';

// Minimal demo entrypoint. To run: `flutter run -t lib/main_demo.dart` after
// you've configured Firebase or have the backend emulator running.

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  // Determine base URL at startup so we can configure emulator targets when
  // running locally. You can override METARTPAY_BASE_URL when launching.
  final baseUrl = const String.fromEnvironment(
    'METARTPAY_BASE_URL',
    defaultValue: 'https://metartpay-api-456120304945.us-central1.run.app',
  );

  try {
    // Prefer explicit options generated by the Firebase CLI. If those
    // are not available on this build (values.xml missing), fall back and
    // allow the app to continue so the demo stays runnable.
    await Firebase.initializeApp(
      options: DefaultFirebaseOptions.currentPlatform,
    );
  } catch (e) {
    // Log and continue â€” demo will still run but features that require
    // Firebase (Realtime updates) may not function without proper config.
    // Keep a short console message so developers see the root cause.
    // ignore: avoid_print
    print('Firebase init warning: $e');
  }
  // Configure Firestore emulator when running against a local backend.
  // This is best-effort and uses two approaches: the convenience
  // `useFirestoreEmulator` API and a lower-level Settings fallback for
  // older plugin versions or when called slightly out of order.
  // Only enable emulator when baseUrl explicitly targets localhost or when
  // the developer passes --dart-define=FORCE_FIRESTORE_EMULATOR=true.
  final shouldUseEmulator =
      baseUrl.contains('127.0.0.1') ||
      baseUrl.contains('10.0.2.2') ||
      const bool.fromEnvironment(
        'FORCE_FIRESTORE_EMULATOR',
        defaultValue: false,
      );
  if (shouldUseEmulator) {
    try {
      FirebaseFirestore.instance.useFirestoreEmulator('127.0.0.1', 8080);
      // ignore: avoid_print
      print('Firestore emulator configured via useFirestoreEmulator');
    } catch (e) {
      // Fallback: some plugin versions prefer Settings. Try that too.
      try {
        FirebaseFirestore.instance.settings = Settings(
          host: '127.0.0.1:8080',
          sslEnabled: false,
          persistenceEnabled: false,
        );
        // ignore: avoid_print
        print('Firestore emulator configured via Settings fallback');
      } catch (e2) {
        // ignore: avoid_print
        print('Failed to configure Firestore emulator: $e / $e2');
      }
    }
  }
  runApp(DemoApp(baseUrl: baseUrl));
}

class DemoApp extends StatelessWidget {
  final String baseUrl;

  const DemoApp({super.key, required this.baseUrl});

  @override
  Widget build(BuildContext context) {
    // baseUrl is provided from main() so the UI and emulator wiring both
    // use the same value.

    return MaterialApp(
      title: 'MetartPay Demo',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: DemoSimulatePage(baseUrl: baseUrl),
    );
  }
}
